@page "/contacts"
@inject IContactService contactService
@inject NavigationManager navigationManager

<h3>Contacts</h3>
<div>
    <span class="@((IsSearching ? "oi oi-loop-circular" : "oi oi-magnifying-glass"))"></span>
    <input type="text" id="myInput" class="search" @bind="@SearchQuery" @bind:event="oninput" placeholder="Search for contacts..">
</div>

@if (contacts == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <table id="myTable" class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Country</th>
                <th>Edit</th>
                <th>Remove</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var contact in contacts)
            {
                <tr>
                    <td>@contact.Name</td>
                    <td>@contact.Country</td>
                    <td><button @onclick="@(() => EditContact(contact.Id))"><i class="oi oi-pencil"></i></button></td>
                    <td><button @onclick="@(() => RemoveContact(contact.Id))"><i class="oi oi-trash"></i></button></td>
                </tr>
            }
            <tr>
                <td colspan="3"></td>
                <td><button @onclick="@(() => AddContact())"><i class="oi oi-plus"></i></button></td>
            </tr>
        </tbody>
    </table>

    <CreateContactForm CreateContactModel="@CreateContactModel" OnValidSubmit="@CreateContact"></CreateContactForm>
    
}
@code {

    bool IsSearching => !(currentSearchCts == null);

    CancellationTokenSource currentSearchCts;

    private string _searchQuery;

    public string SearchQuery
    {
        get => _searchQuery; set
        {
            _searchQuery = value;

            _ = SearchAsync(_searchQuery);

        }
    }

    public CreateContactModel CreateContactModel { get; set; }

    private List<ContactModel> contacts;

    protected override async Task OnInitializedAsync()
    {
        CreateContactModel = new CreateContactModel();
        await Task.Run(() =>
        {
            GetContacts();
        });
    }

    public void GetContacts()
    {
        Console.WriteLine("GetContacts is Called");
        contacts = contactService.Contacts;
    }

    public void EditContact(Guid id)
    {
        Console.WriteLine($"EditContact is Called with {id}");
        navigationManager.NavigateTo($"Contacts/{id}");

    }

    public void RemoveContact(Guid id)
    {
        Console.WriteLine($"RemoveContact is Called with {id}");
        contactService.Contacts.RemoveAll(c => c.Id == id);
        StateHasChanged();
    }

    public void CreateContact()
    {
        contactService.CreateContact(CreateContactModel);
        CreateContactModel = new CreateContactModel();
        StateHasChanged();
    }

    public void AddContact()
    {

    }

    public async Task SearchAsync(string input)
    {
        try
        {
            currentSearchCts?.Cancel();

            currentSearchCts = new CancellationTokenSource();

            var searchToken = currentSearchCts.Token;

            await Task.Factory.StartNew(async (st) =>
            {

                await Task.Delay(500);

                var ct = (CancellationToken)st;

                ct.ThrowIfCancellationRequested();

                Console.WriteLine($"Search is Called with {input}");

                if (string.IsNullOrWhiteSpace(input))
                {
                    GetContacts();
                }
                else
                {
                    contacts = contactService.Contacts.Where(c => c.Name.StartsWith(input)).ToList();
                }

                currentSearchCts = null;

            }, searchToken).Unwrap();

            StateHasChanged();
        }
        catch (OperationCanceledException ex)
        {
            Console.WriteLine($"Search is Cancelled {input}");
        }


    }
}