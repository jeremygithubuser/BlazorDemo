@page "/pong"
<h3>Pong</h3>
<button @onclick="@(() => Start())"><i class="oi oi-pencil"></i></button>

<svg height="1000" width="1000">

    @foreach (var gc in GameComponents)
    {
        <SvgComponent GameComponent="@gc" />
    }

</svg>
<button @onmousedown="@(() => OnMoveUpLeftPaddle())" @onmouseup="@(() => OnStopLeftPaddle())"><i class="oi oi-arrow-thick-top"></i></button>
<button @onmousedown="@(() => OnMoveDownLeftPaddle())" @onmouseup="@(() => OnStopLeftPaddle())"><i class="oi oi-arrow-thick-bottom"></i></button>

@code {

    public event MoveBallEventHandler MoveBallEvent;

    public delegate Task MoveBallEventHandler(object sender, MoveBallEventArgs e);

    public event MoveUpLeftPaddleEventHandler MoveUpLeftPaddleEvent;

    public delegate Task MoveUpLeftPaddleEventHandler(object sender, EventArgs e);

    public event MoveDownLeftPaddleEventHandler MoveDownLeftPaddleEvent;

    public delegate Task MoveDownLeftPaddleEventHandler(object sender, EventArgs e);

    public event StopLeftPaddleEventHandler StopLeftPaddleEvent;

    public delegate Task StopLeftPaddleEventHandler(object sender, EventArgs e);

    public event MoveUpRightPaddleEventHandler MoveUpRightPaddleEvent;

    public delegate Task MoveUpRightPaddleEventHandler(object sender, EventArgs e);

    public event MoveDownRightPaddleEventHandler MoveDownRightPaddleEvent;

    public delegate Task MoveDownRightPaddleEventHandler(object sender, EventArgs e);

    public List<GameComponent> GameComponents { get; set; }

    public double Width { get; set; }

    public double Height { get; set; }

    public int ScorePlayerLeft { get; set; }

    public int ScorePlayerRight { get; set; }

    public Rectangle BackGround { get; set; }

    public Line Net { get; set; }

    public Rectangle PaddleLeft { get; set; }

    public Rectangle PaddleRight { get; set; }

    public CancellationTokenSource CancelMoveLeftPaddleTokenSource { get; set; }

    public CancellationToken CancelMoveLeftPaddleToken { get; set; }

    public CancellationTokenSource CancelMoveRightPaddleTokenSource { get; set; }

    public CancellationToken CancelMoveRightPaddleToken { get; set; }

    public Circle Ball { get; set; }

    public Text ScorePlayerLeftText { get; set; }

    public Text ScorePlayerRightText { get; set; }

    public double Vx = 0.6;

    public double Vy = 0.4;

    public double distance = 15;

    protected override async Task OnInitializedAsync()
    {

        MoveBallEvent += UpdateBallPositionAsync;

        MoveBallEvent += UpdateStrategyAsync;

        MoveUpLeftPaddleEvent += OnMoveUpLeftPaddleAsync;

        MoveDownLeftPaddleEvent += OnMoveDownLeftPaddleAsync;

        StopLeftPaddleEvent += OnStopLeftPaddleAsync;

        MoveUpRightPaddleEvent += OnMoveUpRightPaddleAsync;

        MoveDownRightPaddleEvent += OnMoveDownRightPaddleAsync;

        Width = 1000;

        Height = 600;

        GameComponents = new List<GameComponent>();

        BackGround = new Rectangle()
        {
            Id = Guid.NewGuid(),
            Name = "BackGround",
            Height = Height,
            Width = Width,
            X = 0,
            Y = 0,
            Fill = "#E3E8E6"
        };

        Net = new Line()
        {
            Id = Guid.NewGuid(),
            Name = "Net",
            X1 = BackGround.Width / 2,
            Y1 = 0,
            X2 = BackGround.Width / 2,
            Y2 = BackGround.Height,
            Style = "stroke:#fff;stroke-width:5;stroke-dasharray:5,5"
        };

        PaddleLeft = new Rectangle()
        {
            Id = Guid.NewGuid(),
            Name = "PaddleLeft",
            Height = BackGround.Height / 5,
            Width = BackGround.Width / 25,
            X = 0,
            Y = 2 * BackGround.Height / 5,
            Fill = "#00ff99"
        };

        PaddleRight = new Rectangle()
        {
            Id = Guid.NewGuid(),
            Name = "PaddleRight",
            Height = BackGround.Height / 5,
            Width = BackGround.Width / 25,
            X = BackGround.Width - (Width / 25),
            Y = 2 * BackGround.Height / 5,
            Fill = "#ff0066"
        };

        Ball = new Circle()
        {
            Id = Guid.NewGuid(),
            Name = "Ball",
            Cx = BackGround.Width / 2,
            Cy = BackGround.Height / 2,
            R = BackGround.Width / 50,
            Fill = "#0000A0"

        };

        ScorePlayerLeftText = new Text()
        {
            Id = Guid.NewGuid(),
            Name = "ScorePlayerLeftText",
            X = BackGround.Width / 2 - 20,
            Y = 50,
            FontSize = 50,
            FontFamilly = "Menlo, sans-serif",
            Fill = "#fff",
            TextAnchor = "end",
            Content = ScorePlayerLeft.ToString()
        };

        ScorePlayerRightText = new Text()
        {
            Id = Guid.NewGuid(),
            Name = "ScorePlayerRightText",
            X = BackGround.Width / 2 + 20,
            Y = 50,
            FontSize = 50,
            FontFamilly = "Menlo, sans-serif",
            Fill = "#fff",
            TextAnchor = "start",
            Content = ScorePlayerRight.ToString()

        };

        await Task.Run(() =>
        {
            GameComponents.AddRange(new List<GameComponent>()
            {
                BackGround,
                Net,
                PaddleLeft,
                PaddleRight,
                Ball,
                ScorePlayerLeftText,
                ScorePlayerRightText

                                });

        });
    }

    public void Start()
    {
        MoveBallEvent?.Invoke(this, new MoveBallEventArgs(Ball.Cx,Ball.Cy,Ball.Cx,Ball.Cy));
    }

    public async Task UpdateBallPositionAsync(object sender, MoveBallEventArgs e)
    {
        if ((Vy < 0 && Ball.Cy <= 0) || (Vy > 0 && Ball.Cy >= BackGround.Height))
        {
            Vy = -Vy;
        }

        if ((Vx < 0 && Ball.Cx <= 0) || (Vx > 0 && Ball.Cx >= BackGround.Width))
        {
            Vx = -Vx;
        }

        var _cx = Ball.Cx;

        var _cy = Ball.Cy;

        Ball.Cx = Ball.Cx + Vx * distance;

        Ball.Cy = Ball.Cy + Vy * distance;

        StateHasChanged();

        await Task.Delay(1);

        MoveBallEvent?.Invoke(this, new MoveBallEventArgs(_cx,_cy,Ball.Cx,Ball.Cy));
    }

    public void OnMoveUpLeftPaddle()
    {
        CancelMoveLeftPaddleTokenSource = new CancellationTokenSource();
        CancelMoveLeftPaddleToken = CancelMoveLeftPaddleTokenSource.Token;
        MoveUpLeftPaddleEvent?.Invoke(this, new EventArgs());
    }

    public async Task OnMoveUpLeftPaddleAsync(object sender, EventArgs e)
    {
        while (PaddleLeft.Y >= 0 && CancelMoveLeftPaddleToken.IsCancellationRequested==false)
        {
            PaddleLeft.Y -= 5;
            StateHasChanged();
            await Task.Delay(1);
        }
    }

    public void OnMoveDownLeftPaddle()
    {
        CancelMoveLeftPaddleTokenSource = new CancellationTokenSource();
        CancelMoveLeftPaddleToken = CancelMoveLeftPaddleTokenSource.Token;
        MoveDownLeftPaddleEvent?.Invoke(this, new EventArgs());
    }

    public async Task OnMoveDownLeftPaddleAsync(object sender, EventArgs e)
    {
        while (PaddleLeft.Y <= (BackGround.Height - PaddleLeft.Height ) && CancelMoveLeftPaddleToken.IsCancellationRequested==false)
        {
            PaddleLeft.Y += 5;
            StateHasChanged();
            await Task.Delay(1);
        }
    }

    public void OnStopLeftPaddle()
    {
        StopLeftPaddleEvent?.Invoke(this, new EventArgs());
    }

    public async Task OnStopLeftPaddleAsync(object sender, EventArgs e)
    {
        CancelMoveLeftPaddleTokenSource.Cancel();
        await Task.Delay(1);
    }

    public async Task UpdateStrategyAsync(object sender, MoveBallEventArgs e)
    {
        if (e._CY < e.CY)
        {
            MoveDownRightPaddleEvent?.Invoke(this, new EventArgs());
        }

        if (e._CY > e.CY)
        {
            MoveUpRightPaddleEvent?.Invoke(this, new EventArgs());
        }
    }

    public async Task OnMoveUpRightPaddleAsync(object sender, EventArgs e)
    {
        if (PaddleRight.Y >= 0)
        {
            PaddleRight.Y -= 5;
            StateHasChanged();
            await Task.Delay(1);
        }
    }

    public async Task OnMoveDownRightPaddleAsync(object sender, EventArgs e)
    {
        while (PaddleRight.Y <= (BackGround.Height - PaddleRight.Height ))
        {
            PaddleRight.Y += 5;
            StateHasChanged();
            await Task.Delay(1);
        }
    }

    public class MoveBallEventArgs : EventArgs
    {
        public double _CX { get; set; }
        public double _CY { get; set; }

        public double CX { get; set; }
        public double CY { get; set; }

        public MoveBallEventArgs(double _cx,double _cy,double cx,double cy)
        {
            _CX = -cx;
            _CY = _cy;
            CX = cx;
            CY = cy;
        }
    }

}
